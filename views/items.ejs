<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui" />
  <link href="https://cdn.jsdelivr.net/npm/vuetify/dist/vuetify.min.css" rel="stylesheet" />

  <% include ./templates/head %>
  <script src="https://cdn.jsdelivr.net/npm/vue"></script>
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons" rel="stylesheet" />
  <style>
    .container {
      max-width: 3000px;
    }

    .v-card__actions {
      background-color: #00897b !important;
    }

    .product-image {
      width: 70%;
    }

    .item-title {
      display: inline-block;
      margin: 8px 0;
    }

    .price-tag {
      height: auto;
      font-size: 25px;
      float: right;
      margin-right: 0px;
    }

    .add-to-cart,
    .share-button {
      margin: -6px 6px 6px -6px;
    }

    .btn{
      text-decoration: none;
      font-size: 1.2rem;
      color:white;
      padding:6px 8px 6px 8px;
      display:inline-block;
      transition:all 0.1s;
    }

    .trand-item {
      background-color: #00796b !important;
    }

    table {}

  </style>
  <scrip>

  </scrip>
</head>

<body>
  <!-- header -->
  <header>
    <% include ./templates/header %>
  </header>

  <div class=" container-fluid">
    <div class="row">
      <% include ./templates/sidebar %>

      <!-- Dashboard 영역 -->
      <main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-4">
        <div
          class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
          <h1 class="h2">Products Detail</h1>

          <div class="btn-toolbar mb-2 mb-md-0">
            <div class="btn-group mr-2"></div>
          </div>
        </div>

        <!-- vuejs  -->

        <div id="app">
          <template>
            <v-app id="inspire2" style="height: 650px;">
              <v-container fluid grid-list-xl>
                <!-- row wrap을 잡아줘야 한다!! -->
                <v-layout row wrap>
                  <v-flex xs12>
                    <h1>
                      {{ itemTitle  }}
                    </h1>
                  </v-flex>
                  <v-flex md6>
                    <!-- <img class="product-image" :src="item.thumbnail_url" alt=""> -->
                    <img class="product-image"
                      src="https://pwa-shop.firebaseapp.com/assets/products/jsconf-detail_1024x1024.jpg">
                  </v-flex>
                  <v-flex md6>
                    <div class="add-to-cart">
                      <!-- <v-btn primary light @click.native="addItem" :disabled="item.quantity === 0"> -->
                      <!-- 구매 했을 경우 비활성화 되야함. -->
                      <v-btn class="trand-item" flat color="white" @click.native="dataPurchase()"
                        v-bind:disabled="isPurButtonDisabled">
                        Trading
                      </v-btn>
                      <span>{{ purMessage }}</span>
                    </div>
                    <!-- datatype table -->
                    <v-data-table :items="datatypes" class="elevation-1" hide-actions hide-headers>
                      <template v-slot:items="props">
                        <td>{{ props.item.name }}</td>
                        <td class="text-xs-left">{{ props.item.value }}</td>
                      </template>
                    </v-data-table>

                    <br />
                    <div class="share-button" id="filedonwBtn">
                      <div v-for="items in itemId">
                        <a class="btn trand-item" v-bind:href="'/products/fileDownload/'+ items">
                          <v-icon>share</v-icon>&nbsp;&nbsp; Download File
                        </a>
                      </div>
                  </v-flex>
                </v-layout>
              </v-container>
            </v-app>
          </template>
        </div>

        <br />
        <table class="table table-bordered" id="datainfoTable">
          <colgroup>
            <col style="width: 20%" />
            <col style="width: 80%" />
          </colgroup>
          <thead>
            <tr>
              <td colspan="2" style="background-color: #efefef;">
                Metadata Info
              </td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th id="thField01" style="background-color: #efefef;"></th>
              <td id="tdField01"></td>
            </tr>
            <tr>
              <th id="thField02" style="background-color: #efefef;"></th>
              <td id="tdField02"></td>
            </tr>
            <tr>
              <th id="thField03" style="background-color: #efefef;"></th>
              <td id="tdField03"></td>
            </tr>
            <tr>
              <th id="thField04" style="background-color: #efefef;"></th>
              <td id="tdField04"></td>
            </tr>
            <tr>
              <th id="thField05" style="background-color: #efefef;"></th>
              <td id="tdField05"></td>
            </tr>
          </tbody>
        </table>

        <a id="fileDownload"></a>
      </main>
    </div>
  </div>

  <!--데이터 타입 추가 팝업-->
  <% include ./templates/modals %>

  <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/vuetify/dist/vuetify.js"></script>
  <script>
    var itemId = '<%=itemId %>';

    // 루트 인스턴스 생성
    var app = new Vue({
      el: ' #app',
      data() {
        return { 
          isPurButtonDisabled: false,
          isDownButtonDisabled: true,
          itemId: '',
          itemTitle: '',
          purMessage: 'You can purchase data!',
          items: {
            cnt: 0,
            itemPrice: [],
            itemTitle: [],
            itemNum: []
          },
          datatypes: [{
              name: 'Privider',
              value: ''
            },
            {
              name: 'Datetime',
              value: ''
            },
            {
              name: 'Price (OSB)',
              value: ''
            },
            {
              name: 'Traded',
              value: ''
            }
          ]
        };
      },
      created() {
        console.log("created hook");
        // button을 임의로 그리기
        this.fileDownload();
      },
      methods: {
        dataPurchase() {
          var itemId = this.itemId;

          $.ajax({
            url: '/products/purchase',
            method: 'POST',
            dataType: 'json',
            data: {
              itemId: itemId
            },
            success: function(result) {
              alert("data purchase success!!");
              location.reload();

            },
            error: function(err) {
              console.log(err);
            }
          })
        }
      },
    });


    /* get datatype */
    $(function() {
      var _self = this;
      _self.defaultView.app.itemId = itemId;

      /** get datatype */
      $.ajax({
        url: '/domains/getDataTypeList',
        type: 'GET',
        dataType: 'json',
        success: function(result) {
          var json = result;
          console.log(json);
        },
        error: function(err) {
          alert('erroccurred ');
        }
      });

      /** get datainfo */
      $.ajax({
        url: '/products/getDatainfo/' + itemId,
        methid: 'GET',
        // data: itemId,
        dataType: 'json',
        success: function(result) {
          _sc = _self;
          var json = result;
          // alert(_sc.defaultView.app.datatypes.length);
          // var dataMap = _sc.defaultView.app.datatypes.length;
          // var dataList = _sc.defaultView.app.datatypes;
          // for (let j = 0; j < dataMap.length; j++) {
          //   dataList = json.data[0].

          // }
          var dataArr = new Array();

          for (let i = 0; i < json.data.length; i++) {
            _sc.defaultView.app.itemTitle = json.data[i].dataTitle;
            if (json.data[0].traded == 1) {
              _sc.defaultView.app.isPurButtonDisabled = true
              _sc.defaultView.app.purMessage = 'Youre data already traded'
              _sc.defaultView.app.isDownButtonDisabled = false;
            }

            dataArr[0] = json.data[0].dataProvider;
            dataArr[1] = json.data[0].dataAddDate;
            dataArr[2] = json.data[0].dataPrice;
            if (json.data[0].traded == 0) {
              dataArr[3] = 'data not traded..';
            } else {
              dataArr[3] = 'data trading!';
            }

            // datatype
            $("#thField01").text(json.data[i].dtField01);
            $("#thField02").text(json.data[i].dtField02);
            $("#thField03").text(json.data[i].dtField03);
            $("#thField04").text(json.data[i].dtField04);
            $("#thField05").text(json.data[i].dtField05);

            // datainfo
            $("#tdField01").text(json.data[i].dataField01);
            $("#tdField02").text(json.data[i].dataField02);
            $("#tdField03").text(json.data[i].dataField03);
            $("#tdField04").text(json.data[i].dataField04);
            $("#tdField05").text(json.data[i].dataField05);

          }

          // data header 
          var dataMap = _sc.defaultView.app.datatypes;
          for (let k = 0; k < 4; k++) {
            console.log(dataArr);
            console.log(dataArr[k]);
            dataMap[k].value = dataArr[k];
          }

        },
        error: function(err) {
          console.log(err);
          // traded 상태값 바뀜
          // download 버튼 활성화 
          // 계정 어카운트 차감... --> 이거 안해놨넹... 
        }
      });
    });

  </script>
</body>

</html>
